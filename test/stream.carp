;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "Test.carp")
(load "src/stream.carp")

(use-all Test Stream)

(def strm (Stream.init (fn [s] (if (= 0 (Array.length s))
                        (Step.Done)
                        (Step.Yield (Array.nth s 0) (Array.suffix s 1)))) [1 2
                        3]))
(defn yield-inc [s] (Step.Yield @s (inc @s)))
(defn arr-len [arr] (Array.length arr))

(deftest test
  (assert-equal test
    &(Stream.init (fn [s] (the (Step Int Int) (Step.Done))) 0)
    (the (Ref (Stream Int Int)) &(Stream.zero))
    "zero initializes a finished stream")
  (assert-equal test
    &strm
    &(from-array &[1 2 3])
    "from-array initializes a stream from an array")
  (assert-equal test
    &(Node.Node (Maybe.Just 1))
    &(Lazy.force &(head &(from-array &[1 2 3])))
    "head returns a lazy computation that returns the first element in a stream")
  (assert-equal test
    &(from-array &[2 3])
    &(Lazy.force &(tail &(from-array &[1 2 3])))
    "tail returns a lazy computation that returns the remaining elements in a
    stream")
  (assert-equal test
    &(from-array &[2 3])
    &(do (ignore (Lazy.force &(advance &strm))) @&strm)
    "advance returns a lazy computation that advances a stream in place")
  (assert-equal test
    &[(Maybe.Just 1) (Maybe.Just 2)]
    &(to-array &(from-array &[1 2]))
    "to-array converts a stream to an array")
  (assert-equal test
    &[(Maybe.Just 1) (Maybe.Just 2)]
    &(to-array &(from-array &[1 2]))
    "to-array converts a stream to an array")
  (assert-equal test
    &(Node.Node 1)
    &(Lazy.force &(head &(map &Maybe.or-zero &(from-array &[1 2 3]))))
    "map maps a function f over a stream's values")
  (assert-equal test
    &(Stream.init (fn [s] (Step.Yield @s (Int.+ @s 1))) 3)
    &(replace &arr-len &yield-inc &(from-array &[1 2 3]))
    "replace substitutes a stream using state manipulating functions")
  (assert-equal test
    &(Stream.init (fn [s] (Step.Yield (+ 1 @s) (Int.+ @s 1))) 3)
    &(transform &(fn [x] (+ 1 x)) &arr-len &yield-inc &(from-array &[1 2 3]))
    "transform replaces a stream and maps a function f to the values of the new stream")
)

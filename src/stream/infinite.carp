;; Copyright 2020 Google LLC
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;  https://www.apache.org/licenses/LICENSE-2.0
;;
;;  Unless required by applicable law or agreed to in writing, software
;;  distributed under the License is distributed on an "AS IS" BASIS,
;;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;  See the License for the specific language governing permissions and
;;  limitations under the License.

(load "src/stream/node.carp")
(load "src/stream/step.carp")
(load "src/stream/interface.carp")
(load "src/stream/generic.carp")

(defmodule InfiniteStream
  (doc increment "
    Returns an infinite stream that continually returns the successor or
    increment of its previous value (starting with `start`.

    The argument type must implement `inc`.

    ```
    (increment 0)
    => (InfiniteStream Fn 0)
    (force &(head &(increment 0)))
    => 0
    (force &(tail &(increment 0)))
    => (InfiniteStream Fn 1)
    ```")
  (defn increment [start]
    (let [n (fn [s] (Step.Yield s (inc s)))]
      (InfiniteStream.init n start)))

  (doc repeat "
    Returns an infinite stream of a constant value, `x`.")
  (defn repeat [x]
    (let [n (fn [s] (Step.Yield s s))]
      (InfiniteStream.init n x)))

  (doc loop "
    Returns an infinite stream that continually executes a nullary function `f`,
    keeping track of the number of executions as its state.")
  (defn loop [f]
    (let [n (fn [s] (Step.Yield (f) (+ 1 s)))]
      (InfiniteStream.init n 0)))

  (doc loop-with "
    Returns an infinite stream that continually executes a unary function `f`.
    First applies f to `s`, which serves as the starting state of the stream,
    then applies `f` to the result of the last application.")
  (defn loop-with [f s]
      (let [n (fn [st] (let [v (f st)] (Step.Yield v @&v)))]
        (InfiniteStream.init n s)))
)
